# Rime schema
# encoding: utf-8

schema:
  name: "淅淅输入法"
  schema_id: xixi
  author:
    - 猎鹞
    - lantian
  description: |
    基于蓝小兮方案修改
  version: 0.1

switches:
  - name: ascii_mode
    states: [ 中, 西 ]
    reset: 0
  - name: full_shape
    states: [ 半, 全 ]
  - name: ascii_punct
    reset: [ 。, . ]
  - name: zh_trad
    reset: 0
    states: [ 简, 繁 ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - table_translator
  filters:
    - simplifier

speller:
  alphabet: "yxwtsrqpnmlkjihgfdczuvoeab;/.,"
  initials: "yxwtsrqpnmlkjihgfedcb"
  auto_select: true
  # max_code_length: 5

menu:
  page_size: 5

translator:
  dictionary: xixi
  enable_charset_filter: true
  enable_sentence: false
  enable_encoder: true
  encode_commit_history: true
  enable_user_dict: false
  enable_completion: true

zh_trad:
  opencc_config: s2tw.json
  option_name: zh_trad

key_binder:
  bindings:
    # Emacs style
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
    - { when: composing, accept: Alt+v, send: Page_Up }
    - { when: composing, accept: Control+v, send: Page_Down }
    # move by word
    - { when: composing, accept: ISO_Left_Tab, send: Shift+Left }
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }
    # flip page
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    # - { when: paging, accept: comma, send: Page_Up }
    # - { when: has_menu, accept: period, send: Page_Down }
    # hotkey switch
    - { when: always, accept: Control+Shift+1, select: .next }
    - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
    - { when: always, accept: Control+Shift+3, toggle: full_shape }
    - { when: always, accept: Control+Shift+4, toggle: simplification }
    - { when: always, accept: Control+Shift+5, toggle: extended_charset }
    - { when: always, accept: Control+Shift+exclam, select: .next }
    - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
    - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
    - { when: always, accept: Control+Shift+dollar, toggle: simplification }
    - { when: always, accept: Control+Shift+percent, toggle: extended_charset }
    - { when: always, accept: Shift+space, toggle: full_shape }
    - { when: always, accept: Control+period, toggle: ascii_punct }

punctuator:
  import_preset: default

recognizer:
  patterns:
    retention: "^[ebpmfdtnlgkhjqxiscryw]([a-z;,./][zaevou;/]*)?$"
